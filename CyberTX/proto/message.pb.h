// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto
// Protobuf C++ Version: 5.26.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_message_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_message_2eproto;
namespace cybertx {
namespace messages {
class PPMUpdate;
struct PPMUpdateDefaultTypeInternal;
extern PPMUpdateDefaultTypeInternal _PPMUpdate_default_instance_;
class PPMUpdateAll;
struct PPMUpdateAllDefaultTypeInternal;
extern PPMUpdateAllDefaultTypeInternal _PPMUpdateAll_default_instance_;
}  // namespace messages
}  // namespace cybertx
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace cybertx {
namespace messages {

// ===================================================================


// -------------------------------------------------------------------

class PPMUpdateAll final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cybertx.messages.PPMUpdateAll) */ {
 public:
  inline PPMUpdateAll() : PPMUpdateAll(nullptr) {}
  ~PPMUpdateAll() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PPMUpdateAll(
      ::google::protobuf::internal::ConstantInitialized);

  inline PPMUpdateAll(const PPMUpdateAll& from) : PPMUpdateAll(nullptr, from) {}
  inline PPMUpdateAll(PPMUpdateAll&& from) noexcept
      : PPMUpdateAll(nullptr, std::move(from)) {}
  inline PPMUpdateAll& operator=(const PPMUpdateAll& from) {
    CopyFrom(from);
    return *this;
  }
  inline PPMUpdateAll& operator=(PPMUpdateAll&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PPMUpdateAll& default_instance() {
    return *internal_default_instance();
  }
  static inline const PPMUpdateAll* internal_default_instance() {
    return reinterpret_cast<const PPMUpdateAll*>(
        &_PPMUpdateAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PPMUpdateAll& a, PPMUpdateAll& b) { a.Swap(&b); }
  inline void Swap(PPMUpdateAll* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PPMUpdateAll* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PPMUpdateAll* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PPMUpdateAll>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PPMUpdateAll& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PPMUpdateAll& from) { PPMUpdateAll::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PPMUpdateAll* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "cybertx.messages.PPMUpdateAll"; }

 protected:
  explicit PPMUpdateAll(::google::protobuf::Arena* arena);
  PPMUpdateAll(::google::protobuf::Arena* arena, const PPMUpdateAll& from);
  PPMUpdateAll(::google::protobuf::Arena* arena, PPMUpdateAll&& from) noexcept
      : PPMUpdateAll(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kChannelValuesFieldNumber = 2,
    kLineFieldNumber = 1,
  };
  // repeated int32 channel_values = 2;
  int channel_values_size() const;
  private:
  int _internal_channel_values_size() const;

  public:
  void clear_channel_values() ;
  ::int32_t channel_values(int index) const;
  void set_channel_values(int index, ::int32_t value);
  void add_channel_values(::int32_t value);
  const ::google::protobuf::RepeatedField<::int32_t>& channel_values() const;
  ::google::protobuf::RepeatedField<::int32_t>* mutable_channel_values();

  private:
  const ::google::protobuf::RepeatedField<::int32_t>& _internal_channel_values() const;
  ::google::protobuf::RepeatedField<::int32_t>* _internal_mutable_channel_values();

  public:
  // optional int32 line = 1;
  bool has_line() const;
  void clear_line() ;
  ::int32_t line() const;
  void set_line(::int32_t value);

  private:
  ::int32_t _internal_line() const;
  void _internal_set_line(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cybertx.messages.PPMUpdateAll)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::int32_t> channel_values_;
    mutable ::google::protobuf::internal::CachedSize _channel_values_cached_byte_size_;
    ::int32_t line_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class PPMUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:cybertx.messages.PPMUpdate) */ {
 public:
  inline PPMUpdate() : PPMUpdate(nullptr) {}
  ~PPMUpdate() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PPMUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline PPMUpdate(const PPMUpdate& from) : PPMUpdate(nullptr, from) {}
  inline PPMUpdate(PPMUpdate&& from) noexcept
      : PPMUpdate(nullptr, std::move(from)) {}
  inline PPMUpdate& operator=(const PPMUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PPMUpdate& operator=(PPMUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PPMUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PPMUpdate* internal_default_instance() {
    return reinterpret_cast<const PPMUpdate*>(
        &_PPMUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(PPMUpdate& a, PPMUpdate& b) { a.Swap(&b); }
  inline void Swap(PPMUpdate* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PPMUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PPMUpdate* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PPMUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PPMUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PPMUpdate& from) { PPMUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PPMUpdate* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "cybertx.messages.PPMUpdate"; }

 protected:
  explicit PPMUpdate(::google::protobuf::Arena* arena);
  PPMUpdate(::google::protobuf::Arena* arena, const PPMUpdate& from);
  PPMUpdate(::google::protobuf::Arena* arena, PPMUpdate&& from) noexcept
      : PPMUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLineFieldNumber = 1,
    kChannelFieldNumber = 2,
    kChannelValueFieldNumber = 3,
  };
  // optional int32 line = 1;
  bool has_line() const;
  void clear_line() ;
  ::int32_t line() const;
  void set_line(::int32_t value);

  private:
  ::int32_t _internal_line() const;
  void _internal_set_line(::int32_t value);

  public:
  // int32 channel = 2;
  void clear_channel() ;
  ::int32_t channel() const;
  void set_channel(::int32_t value);

  private:
  ::int32_t _internal_channel() const;
  void _internal_set_channel(::int32_t value);

  public:
  // int32 channel_value = 3;
  void clear_channel_value() ;
  ::int32_t channel_value() const;
  void set_channel_value(::int32_t value);

  private:
  ::int32_t _internal_channel_value() const;
  void _internal_set_channel_value(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:cybertx.messages.PPMUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t line_;
    ::int32_t channel_;
    ::int32_t channel_value_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// PPMUpdate

// optional int32 line = 1;
inline bool PPMUpdate::has_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PPMUpdate::clear_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.line_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PPMUpdate::line() const {
  // @@protoc_insertion_point(field_get:cybertx.messages.PPMUpdate.line)
  return _internal_line();
}
inline void PPMUpdate::set_line(::int32_t value) {
  _internal_set_line(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:cybertx.messages.PPMUpdate.line)
}
inline ::int32_t PPMUpdate::_internal_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.line_;
}
inline void PPMUpdate::_internal_set_line(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.line_ = value;
}

// int32 channel = 2;
inline void PPMUpdate::clear_channel() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_ = 0;
}
inline ::int32_t PPMUpdate::channel() const {
  // @@protoc_insertion_point(field_get:cybertx.messages.PPMUpdate.channel)
  return _internal_channel();
}
inline void PPMUpdate::set_channel(::int32_t value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:cybertx.messages.PPMUpdate.channel)
}
inline ::int32_t PPMUpdate::_internal_channel() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channel_;
}
inline void PPMUpdate::_internal_set_channel(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_ = value;
}

// int32 channel_value = 3;
inline void PPMUpdate::clear_channel_value() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_value_ = 0;
}
inline ::int32_t PPMUpdate::channel_value() const {
  // @@protoc_insertion_point(field_get:cybertx.messages.PPMUpdate.channel_value)
  return _internal_channel_value();
}
inline void PPMUpdate::set_channel_value(::int32_t value) {
  _internal_set_channel_value(value);
  // @@protoc_insertion_point(field_set:cybertx.messages.PPMUpdate.channel_value)
}
inline ::int32_t PPMUpdate::_internal_channel_value() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channel_value_;
}
inline void PPMUpdate::_internal_set_channel_value(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_value_ = value;
}

// -------------------------------------------------------------------

// PPMUpdateAll

// optional int32 line = 1;
inline bool PPMUpdateAll::has_line() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PPMUpdateAll::clear_line() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.line_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t PPMUpdateAll::line() const {
  // @@protoc_insertion_point(field_get:cybertx.messages.PPMUpdateAll.line)
  return _internal_line();
}
inline void PPMUpdateAll::set_line(::int32_t value) {
  _internal_set_line(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:cybertx.messages.PPMUpdateAll.line)
}
inline ::int32_t PPMUpdateAll::_internal_line() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.line_;
}
inline void PPMUpdateAll::_internal_set_line(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.line_ = value;
}

// repeated int32 channel_values = 2;
inline int PPMUpdateAll::_internal_channel_values_size() const {
  return _internal_channel_values().size();
}
inline int PPMUpdateAll::channel_values_size() const {
  return _internal_channel_values_size();
}
inline void PPMUpdateAll::clear_channel_values() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.channel_values_.Clear();
}
inline ::int32_t PPMUpdateAll::channel_values(int index) const {
  // @@protoc_insertion_point(field_get:cybertx.messages.PPMUpdateAll.channel_values)
  return _internal_channel_values().Get(index);
}
inline void PPMUpdateAll::set_channel_values(int index, ::int32_t value) {
  _internal_mutable_channel_values()->Set(index, value);
  // @@protoc_insertion_point(field_set:cybertx.messages.PPMUpdateAll.channel_values)
}
inline void PPMUpdateAll::add_channel_values(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_channel_values()->Add(value);
  // @@protoc_insertion_point(field_add:cybertx.messages.PPMUpdateAll.channel_values)
}
inline const ::google::protobuf::RepeatedField<::int32_t>& PPMUpdateAll::channel_values() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:cybertx.messages.PPMUpdateAll.channel_values)
  return _internal_channel_values();
}
inline ::google::protobuf::RepeatedField<::int32_t>* PPMUpdateAll::mutable_channel_values()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:cybertx.messages.PPMUpdateAll.channel_values)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_channel_values();
}
inline const ::google::protobuf::RepeatedField<::int32_t>&
PPMUpdateAll::_internal_channel_values() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.channel_values_;
}
inline ::google::protobuf::RepeatedField<::int32_t>* PPMUpdateAll::_internal_mutable_channel_values() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.channel_values_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace cybertx


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_message_2eproto_2epb_2eh
