// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace cybertx {
namespace messages {
class PPMUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PPMUpdate> _instance;
} _PPMUpdate_default_instance_;
class PPMUpdateAllDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PPMUpdateAll> _instance;
} _PPMUpdateAll_default_instance_;
}  // namespace messages
}  // namespace cybertx
static void InitDefaultsscc_info_PPMUpdate_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cybertx::messages::_PPMUpdate_default_instance_;
    new (ptr) ::cybertx::messages::PPMUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cybertx::messages::PPMUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PPMUpdate_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PPMUpdate_message_2eproto}, {}};

static void InitDefaultsscc_info_PPMUpdateAll_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::cybertx::messages::_PPMUpdateAll_default_instance_;
    new (ptr) ::cybertx::messages::PPMUpdateAll();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::cybertx::messages::PPMUpdateAll::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PPMUpdateAll_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PPMUpdateAll_message_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdate, line_),
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdate, channel_),
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdate, channel_value_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdateAll, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdateAll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdateAll, line_),
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdateAll, channel_values_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::cybertx::messages::PPMUpdate)},
  { 11, 18, sizeof(::cybertx::messages::PPMUpdateAll)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cybertx::messages::_PPMUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::cybertx::messages::_PPMUpdateAll_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\020cybertx.messages\"O\n\tPPM"
  "Update\022\021\n\004line\030\001 \001(\005H\000\210\001\001\022\017\n\007channel\030\002 \001"
  "(\005\022\025\n\rchannel_value\030\003 \001(\005B\007\n\005_line\"B\n\014PP"
  "MUpdateAll\022\021\n\004line\030\001 \001(\005H\000\210\001\001\022\026\n\016channel"
  "_values\030\002 \003(\005B\007\n\005_lineb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[2] = {
  &scc_info_PPMUpdate_message_2eproto.base,
  &scc_info_PPMUpdateAll_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, descriptor_table_protodef_message_2eproto, "message.proto", 190,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 2, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto)), true);
namespace cybertx {
namespace messages {

// ===================================================================

void PPMUpdate::InitAsDefaultInstance() {
}
class PPMUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<PPMUpdate>()._has_bits_);
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PPMUpdate::PPMUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cybertx.messages.PPMUpdate)
}
PPMUpdate::PPMUpdate(const PPMUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&line_, &from.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_value_) -
    reinterpret_cast<char*>(&line_)) + sizeof(channel_value_));
  // @@protoc_insertion_point(copy_constructor:cybertx.messages.PPMUpdate)
}

void PPMUpdate::SharedCtor() {
  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_value_) -
      reinterpret_cast<char*>(&line_)) + sizeof(channel_value_));
}

PPMUpdate::~PPMUpdate() {
  // @@protoc_insertion_point(destructor:cybertx.messages.PPMUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PPMUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PPMUpdate::ArenaDtor(void* object) {
  PPMUpdate* _this = reinterpret_cast< PPMUpdate* >(object);
  (void)_this;
}
void PPMUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PPMUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PPMUpdate& PPMUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PPMUpdate_message_2eproto.base);
  return *internal_default_instance();
}


void PPMUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:cybertx.messages.PPMUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_ = 0;
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_value_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(channel_value_));
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PPMUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_line(&has_bits);
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 channel_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          channel_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PPMUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cybertx.messages.PPMUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line = 1;
  if (_internal_has_line()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_line(), target);
  }

  // int32 channel = 2;
  if (this->channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel(), target);
  }

  // int32 channel_value = 3;
  if (this->channel_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cybertx.messages.PPMUpdate)
  return target;
}

size_t PPMUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cybertx.messages.PPMUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 line = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line());
  }

  // int32 channel = 2;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel());
  }

  // int32 channel_value = 3;
  if (this->channel_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_channel_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PPMUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cybertx.messages.PPMUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const PPMUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PPMUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cybertx.messages.PPMUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cybertx.messages.PPMUpdate)
    MergeFrom(*source);
  }
}

void PPMUpdate::MergeFrom(const PPMUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cybertx.messages.PPMUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_line()) {
    _internal_set_line(from._internal_line());
  }
  if (from.channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from.channel_value() != 0) {
    _internal_set_channel_value(from._internal_channel_value());
  }
}

void PPMUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cybertx.messages.PPMUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PPMUpdate::CopyFrom(const PPMUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cybertx.messages.PPMUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPMUpdate::IsInitialized() const {
  return true;
}

void PPMUpdate::InternalSwap(PPMUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PPMUpdate, channel_value_)
      + sizeof(PPMUpdate::channel_value_)
      - PROTOBUF_FIELD_OFFSET(PPMUpdate, line_)>(
          reinterpret_cast<char*>(&line_),
          reinterpret_cast<char*>(&other->line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PPMUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PPMUpdateAll::InitAsDefaultInstance() {
}
class PPMUpdateAll::_Internal {
 public:
  using HasBits = decltype(std::declval<PPMUpdateAll>()._has_bits_);
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PPMUpdateAll::PPMUpdateAll(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channel_values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:cybertx.messages.PPMUpdateAll)
}
PPMUpdateAll::PPMUpdateAll(const PPMUpdateAll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      channel_values_(from.channel_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  line_ = from.line_;
  // @@protoc_insertion_point(copy_constructor:cybertx.messages.PPMUpdateAll)
}

void PPMUpdateAll::SharedCtor() {
  line_ = 0;
}

PPMUpdateAll::~PPMUpdateAll() {
  // @@protoc_insertion_point(destructor:cybertx.messages.PPMUpdateAll)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PPMUpdateAll::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PPMUpdateAll::ArenaDtor(void* object) {
  PPMUpdateAll* _this = reinterpret_cast< PPMUpdateAll* >(object);
  (void)_this;
}
void PPMUpdateAll::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PPMUpdateAll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PPMUpdateAll& PPMUpdateAll::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PPMUpdateAll_message_2eproto.base);
  return *internal_default_instance();
}


void PPMUpdateAll::Clear() {
// @@protoc_insertion_point(message_clear_start:cybertx.messages.PPMUpdateAll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_values_.Clear();
  line_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PPMUpdateAll::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_line(&has_bits);
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 channel_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_channel_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_channel_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PPMUpdateAll::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cybertx.messages.PPMUpdateAll)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line = 1;
  if (_internal_has_line()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_line(), target);
  }

  // repeated int32 channel_values = 2;
  {
    int byte_size = _channel_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_channel_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cybertx.messages.PPMUpdateAll)
  return target;
}

size_t PPMUpdateAll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cybertx.messages.PPMUpdateAll)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 channel_values = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->channel_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _channel_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 line = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PPMUpdateAll::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:cybertx.messages.PPMUpdateAll)
  GOOGLE_DCHECK_NE(&from, this);
  const PPMUpdateAll* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PPMUpdateAll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:cybertx.messages.PPMUpdateAll)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:cybertx.messages.PPMUpdateAll)
    MergeFrom(*source);
  }
}

void PPMUpdateAll::MergeFrom(const PPMUpdateAll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cybertx.messages.PPMUpdateAll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channel_values_.MergeFrom(from.channel_values_);
  if (from._internal_has_line()) {
    _internal_set_line(from._internal_line());
  }
}

void PPMUpdateAll::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:cybertx.messages.PPMUpdateAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PPMUpdateAll::CopyFrom(const PPMUpdateAll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cybertx.messages.PPMUpdateAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPMUpdateAll::IsInitialized() const {
  return true;
}

void PPMUpdateAll::InternalSwap(PPMUpdateAll* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_values_.InternalSwap(&other->channel_values_);
  swap(line_, other->line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PPMUpdateAll::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace cybertx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cybertx::messages::PPMUpdate* Arena::CreateMaybeMessage< ::cybertx::messages::PPMUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cybertx::messages::PPMUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::cybertx::messages::PPMUpdateAll* Arena::CreateMaybeMessage< ::cybertx::messages::PPMUpdateAll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cybertx::messages::PPMUpdateAll >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
