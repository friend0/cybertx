// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace cybertx {
namespace messages {
PROTOBUF_CONSTEXPR PPMUpdate::PPMUpdate(
    ::_pbi::ConstantInitialized)
  : line_(0)
  , channel_(0)
  , channel_value_(0){}
struct PPMUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PPMUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PPMUpdateDefaultTypeInternal() {}
  union {
    PPMUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PPMUpdateDefaultTypeInternal _PPMUpdate_default_instance_;
PROTOBUF_CONSTEXPR PPMUpdateAll::PPMUpdateAll(
    ::_pbi::ConstantInitialized)
  : channel_values_()
  , _channel_values_cached_byte_size_(0)
  , line_(0){}
struct PPMUpdateAllDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PPMUpdateAllDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PPMUpdateAllDefaultTypeInternal() {}
  union {
    PPMUpdateAll _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PPMUpdateAllDefaultTypeInternal _PPMUpdateAll_default_instance_;
}  // namespace messages
}  // namespace cybertx
static ::_pb::Metadata file_level_metadata_message_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_message_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const uint32_t TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdate, line_),
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdate, channel_),
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdate, channel_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdateAll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdateAll, line_),
  PROTOBUF_FIELD_OFFSET(::cybertx::messages::PPMUpdateAll, channel_values_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::cybertx::messages::PPMUpdate)},
  { 9, -1, -1, sizeof(::cybertx::messages::PPMUpdateAll)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::cybertx::messages::_PPMUpdate_default_instance_._instance,
  &::cybertx::messages::_PPMUpdateAll_default_instance_._instance,
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\020cybertx.messages\"A\n\tPPM"
  "Update\022\014\n\004line\030\001 \001(\005\022\017\n\007channel\030\002 \001(\005\022\025\n"
  "\rchannel_value\030\003 \001(\005\"4\n\014PPMUpdateAll\022\014\n\004"
  "line\030\001 \001(\005\022\026\n\016channel_values\030\002 \003(\005b\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_message_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_2eproto = {
    false, false, 162, descriptor_table_protodef_message_2eproto,
    "message.proto",
    &descriptor_table_message_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_message_2eproto::offsets,
    file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto,
    file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace cybertx {
namespace messages {

// ===================================================================

class PPMUpdate::_Internal {
 public:
};

PPMUpdate::PPMUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cybertx.messages.PPMUpdate)
}
PPMUpdate::PPMUpdate(const PPMUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&line_, &from.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_value_) -
    reinterpret_cast<char*>(&line_)) + sizeof(channel_value_));
  // @@protoc_insertion_point(copy_constructor:cybertx.messages.PPMUpdate)
}

inline void PPMUpdate::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&channel_value_) -
    reinterpret_cast<char*>(&line_)) + sizeof(channel_value_));
}

PPMUpdate::~PPMUpdate() {
  // @@protoc_insertion_point(destructor:cybertx.messages.PPMUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PPMUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PPMUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PPMUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:cybertx.messages.PPMUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_value_) -
      reinterpret_cast<char*>(&line_)) + sizeof(channel_value_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PPMUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 channel_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          channel_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PPMUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cybertx.messages.PPMUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_line(), target);
  }

  // int32 channel = 2;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_channel(), target);
  }

  // int32 channel_value = 3;
  if (this->_internal_channel_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_channel_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cybertx.messages.PPMUpdate)
  return target;
}

size_t PPMUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cybertx.messages.PPMUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line());
  }

  // int32 channel = 2;
  if (this->_internal_channel() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  // int32 channel_value = 3;
  if (this->_internal_channel_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_channel_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PPMUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PPMUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PPMUpdate::GetClassData() const { return &_class_data_; }

void PPMUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PPMUpdate *>(to)->MergeFrom(
      static_cast<const PPMUpdate &>(from));
}


void PPMUpdate::MergeFrom(const PPMUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cybertx.messages.PPMUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_line() != 0) {
    _internal_set_line(from._internal_line());
  }
  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from._internal_channel_value() != 0) {
    _internal_set_channel_value(from._internal_channel_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PPMUpdate::CopyFrom(const PPMUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cybertx.messages.PPMUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPMUpdate::IsInitialized() const {
  return true;
}

void PPMUpdate::InternalSwap(PPMUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PPMUpdate, channel_value_)
      + sizeof(PPMUpdate::channel_value_)
      - PROTOBUF_FIELD_OFFSET(PPMUpdate, line_)>(
          reinterpret_cast<char*>(&line_),
          reinterpret_cast<char*>(&other->line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PPMUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class PPMUpdateAll::_Internal {
 public:
};

PPMUpdateAll::PPMUpdateAll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channel_values_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:cybertx.messages.PPMUpdateAll)
}
PPMUpdateAll::PPMUpdateAll(const PPMUpdateAll& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channel_values_(from.channel_values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  line_ = from.line_;
  // @@protoc_insertion_point(copy_constructor:cybertx.messages.PPMUpdateAll)
}

inline void PPMUpdateAll::SharedCtor() {
line_ = 0;
}

PPMUpdateAll::~PPMUpdateAll() {
  // @@protoc_insertion_point(destructor:cybertx.messages.PPMUpdateAll)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PPMUpdateAll::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PPMUpdateAll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PPMUpdateAll::Clear() {
// @@protoc_insertion_point(message_clear_start:cybertx.messages.PPMUpdateAll)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_values_.Clear();
  line_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PPMUpdateAll::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 line = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 channel_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_channel_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_channel_values(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PPMUpdateAll::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:cybertx.messages.PPMUpdateAll)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_line(), target);
  }

  // repeated int32 channel_values = 2;
  {
    int byte_size = _channel_values_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_channel_values(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cybertx.messages.PPMUpdateAll)
  return target;
}

size_t PPMUpdateAll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:cybertx.messages.PPMUpdateAll)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 channel_values = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->channel_values_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _channel_values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 line = 1;
  if (this->_internal_line() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PPMUpdateAll::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PPMUpdateAll::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PPMUpdateAll::GetClassData() const { return &_class_data_; }

void PPMUpdateAll::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PPMUpdateAll *>(to)->MergeFrom(
      static_cast<const PPMUpdateAll &>(from));
}


void PPMUpdateAll::MergeFrom(const PPMUpdateAll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:cybertx.messages.PPMUpdateAll)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  channel_values_.MergeFrom(from.channel_values_);
  if (from._internal_line() != 0) {
    _internal_set_line(from._internal_line());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PPMUpdateAll::CopyFrom(const PPMUpdateAll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:cybertx.messages.PPMUpdateAll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPMUpdateAll::IsInitialized() const {
  return true;
}

void PPMUpdateAll::InternalSwap(PPMUpdateAll* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channel_values_.InternalSwap(&other->channel_values_);
  swap(line_, other->line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PPMUpdateAll::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messages
}  // namespace cybertx
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::cybertx::messages::PPMUpdate*
Arena::CreateMaybeMessage< ::cybertx::messages::PPMUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cybertx::messages::PPMUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::cybertx::messages::PPMUpdateAll*
Arena::CreateMaybeMessage< ::cybertx::messages::PPMUpdateAll >(Arena* arena) {
  return Arena::CreateMessageInternal< ::cybertx::messages::PPMUpdateAll >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
